// Generated from ./MindLang.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class MindLangLexer extends Lexer {
	public static readonly LET = 1;
	public static readonly WHILE = 2;
	public static readonly PRINT = 3;
	public static readonly IF = 4;
	public static readonly ELSE = 5;
	public static readonly FUNCTION = 6;
	public static readonly FOR = 7;
	public static readonly RETURN = 8;
	public static readonly BREAK = 9;
	public static readonly IDENTIFIER = 10;
	public static readonly NUMBER = 11;
	public static readonly STRING = 12;
	public static readonly PLUS = 13;
	public static readonly MINUS = 14;
	public static readonly MULT = 15;
	public static readonly DIV = 16;
	public static readonly MOD = 17;
	public static readonly ASSIGN = 18;
	public static readonly PLUS_ASSIGN = 19;
	public static readonly EQ = 20;
	public static readonly LT = 21;
	public static readonly GT = 22;
	public static readonly LE = 23;
	public static readonly GE = 24;
	public static readonly SEMICOLON = 25;
	public static readonly COMMA = 26;
	public static readonly LPAREN = 27;
	public static readonly RPAREN = 28;
	public static readonly LBRACE = 29;
	public static readonly RBRACE = 30;
	public static readonly LBRACKET = 31;
	public static readonly RBRACKET = 32;
	public static readonly DOT = 33;
	public static readonly INCREMENT = 34;
	public static readonly DECREMENT = 35;
	public static readonly LINE_COMMENT = 36;
	public static readonly BLOCK_COMMENT = 37;
	public static readonly WHITESPACE = 38;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"LET", "WHILE", "PRINT", "IF", "ELSE", "FUNCTION", "FOR", "RETURN", "BREAK", 
		"IDENTIFIER", "NUMBER", "STRING", "PLUS", "MINUS", "MULT", "DIV", "MOD", 
		"ASSIGN", "PLUS_ASSIGN", "EQ", "LT", "GT", "LE", "GE", "SEMICOLON", "COMMA", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "DOT", 
		"INCREMENT", "DECREMENT", "LINE_COMMENT", "BLOCK_COMMENT", "WHITESPACE",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'let'", "'while'", "'print'", "'if'", "'else'", "'function'", 
		"'for'", "'return'", "'break'", undefined, undefined, undefined, "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'='", "'+='", "'=='", "'<'", "'>'", "'<='", 
		"'>='", "';'", "','", "'('", "')'", "'{'", "'}'", "'['", "']'", "'.'", 
		"'++'", "'--'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "LET", "WHILE", "PRINT", "IF", "ELSE", "FUNCTION", "FOR", "RETURN", 
		"BREAK", "IDENTIFIER", "NUMBER", "STRING", "PLUS", "MINUS", "MULT", "DIV", 
		"MOD", "ASSIGN", "PLUS_ASSIGN", "EQ", "LT", "GT", "LE", "GE", "SEMICOLON", 
		"COMMA", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", 
		"DOT", "INCREMENT", "DECREMENT", "LINE_COMMENT", "BLOCK_COMMENT", "WHITESPACE",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(MindLangLexer._LITERAL_NAMES, MindLangLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return MindLangLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(MindLangLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "MindLang.g4"; }

	// @Override
	public get ruleNames(): string[] { return MindLangLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return MindLangLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return MindLangLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return MindLangLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\xEA\b\x01\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x03\x02\x03\x02\x03\x02\x03\x02" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06" +
		"\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x07\v\x84" +
		"\n\v\f\v\x0E\v\x87\v\v\x03\f\x06\f\x8A\n\f\r\f\x0E\f\x8B\x03\r\x03\r\x07" +
		"\r\x90\n\r\f\r\x0E\r\x93\v\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B" +
		"\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F" +
		"\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03" +
		"%\x03%\x03%\x07%\xCF\n%\f%\x0E%\xD2\v%\x03%\x03%\x03&\x03&\x03&\x03&\x07" +
		"&\xDA\n&\f&\x0E&\xDD\v&\x03&\x03&\x03&\x03&\x03&\x03\'\x06\'\xE5\n\'\r" +
		"\'\x0E\'\xE6\x03\'\x03\'\x04\x91\xDB\x02\x02(\x03\x02\x03\x05\x02\x04" +
		"\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v" +
		"\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!" +
		"\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x19" +
		"1\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02" +
		"\"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(\x03\x02\x07\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\x03\x022;\x04\x02\f\f\x0F\x0F\x05\x02\v\f\x0F\x0F\"\"\x02" +
		"\xEF\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02" +
		"\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02" +
		"\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02" +
		"\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02" +
		"\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02" +
		"\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'" +
		"\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02" +
		"\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02" +
		"\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03" +
		"\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02" +
		"\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02" +
		"I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x03O\x03\x02" +
		"\x02\x02\x05S\x03\x02\x02\x02\x07Y\x03\x02\x02\x02\t_\x03\x02\x02\x02" +
		"\vb\x03\x02\x02\x02\rg\x03\x02\x02\x02\x0Fp\x03\x02\x02\x02\x11t\x03\x02" +
		"\x02\x02\x13{\x03\x02\x02\x02\x15\x81\x03\x02\x02\x02\x17\x89\x03\x02" +
		"\x02\x02\x19\x8D\x03\x02\x02\x02\x1B\x96\x03\x02\x02\x02\x1D\x98\x03\x02" +
		"\x02\x02\x1F\x9A\x03\x02\x02\x02!\x9C\x03\x02\x02\x02#\x9E\x03\x02\x02" +
		"\x02%\xA0\x03\x02\x02\x02\'\xA2\x03\x02\x02\x02)\xA5\x03\x02\x02\x02+" +
		"\xA8\x03\x02\x02\x02-\xAA\x03\x02\x02\x02/\xAC\x03\x02\x02\x021\xAF\x03" +
		"\x02\x02\x023\xB2\x03\x02\x02\x025\xB4\x03\x02\x02\x027\xB6\x03\x02\x02" +
		"\x029\xB8\x03\x02\x02\x02;\xBA\x03\x02\x02\x02=\xBC\x03\x02\x02\x02?\xBE" +
		"\x03\x02\x02\x02A\xC0\x03\x02\x02\x02C\xC2\x03\x02\x02\x02E\xC4\x03\x02" +
		"\x02\x02G\xC7\x03\x02\x02\x02I\xCA\x03\x02\x02\x02K\xD5\x03\x02\x02\x02" +
		"M\xE4\x03\x02\x02\x02OP\x07n\x02\x02PQ\x07g\x02\x02QR\x07v\x02\x02R\x04" +
		"\x03\x02\x02\x02ST\x07y\x02\x02TU\x07j\x02\x02UV\x07k\x02\x02VW\x07n\x02" +
		"\x02WX\x07g\x02\x02X\x06\x03\x02\x02\x02YZ\x07r\x02\x02Z[\x07t\x02\x02" +
		"[\\\x07k\x02\x02\\]\x07p\x02\x02]^\x07v\x02\x02^\b\x03\x02\x02\x02_`\x07" +
		"k\x02\x02`a\x07h\x02\x02a\n\x03\x02\x02\x02bc\x07g\x02\x02cd\x07n\x02" +
		"\x02de\x07u\x02\x02ef\x07g\x02\x02f\f\x03\x02\x02\x02gh\x07h\x02\x02h" +
		"i\x07w\x02\x02ij\x07p\x02\x02jk\x07e\x02\x02kl\x07v\x02\x02lm\x07k\x02" +
		"\x02mn\x07q\x02\x02no\x07p\x02\x02o\x0E\x03\x02\x02\x02pq\x07h\x02\x02" +
		"qr\x07q\x02\x02rs\x07t\x02\x02s\x10\x03\x02\x02\x02tu\x07t\x02\x02uv\x07" +
		"g\x02\x02vw\x07v\x02\x02wx\x07w\x02\x02xy\x07t\x02\x02yz\x07p\x02\x02" +
		"z\x12\x03\x02\x02\x02{|\x07d\x02\x02|}\x07t\x02\x02}~\x07g\x02\x02~\x7F" +
		"\x07c\x02\x02\x7F\x80\x07m\x02\x02\x80\x14\x03\x02\x02\x02\x81\x85\t\x02" +
		"\x02\x02\x82\x84\t\x03\x02\x02\x83\x82\x03\x02\x02\x02\x84\x87\x03\x02" +
		"\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02\x02\x02\x86\x16\x03\x02" +
		"\x02\x02\x87\x85\x03\x02\x02\x02\x88\x8A\t\x04\x02\x02\x89\x88\x03\x02" +
		"\x02\x02\x8A\x8B\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02" +
		"\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x91\x07$\x02\x02\x8E\x90\v\x02\x02" +
		"\x02\x8F\x8E\x03\x02\x02\x02\x90\x93\x03\x02\x02\x02\x91\x92\x03\x02\x02" +
		"\x02\x91\x8F\x03\x02\x02\x02\x92\x94\x03\x02\x02\x02\x93\x91\x03\x02\x02" +
		"\x02\x94\x95\x07$\x02\x02\x95\x1A\x03\x02\x02\x02\x96\x97\x07-\x02\x02" +
		"\x97\x1C\x03\x02\x02\x02\x98\x99\x07/\x02\x02\x99\x1E\x03\x02\x02\x02" +
		"\x9A\x9B\x07,\x02\x02\x9B \x03\x02\x02\x02\x9C\x9D\x071\x02\x02\x9D\"" +
		"\x03\x02\x02\x02\x9E\x9F\x07\'\x02\x02\x9F$\x03\x02\x02\x02\xA0\xA1\x07" +
		"?\x02\x02\xA1&\x03\x02\x02\x02\xA2\xA3\x07-\x02\x02\xA3\xA4\x07?\x02\x02" +
		"\xA4(\x03\x02\x02\x02\xA5\xA6\x07?\x02\x02\xA6\xA7\x07?\x02\x02\xA7*\x03" +
		"\x02\x02\x02\xA8\xA9\x07>\x02\x02\xA9,\x03\x02\x02\x02\xAA\xAB\x07@\x02" +
		"\x02\xAB.\x03\x02\x02\x02\xAC\xAD\x07>\x02\x02\xAD\xAE\x07?\x02\x02\xAE" +
		"0\x03\x02\x02\x02\xAF\xB0\x07@\x02\x02\xB0\xB1\x07?\x02\x02\xB12\x03\x02" +
		"\x02\x02\xB2\xB3\x07=\x02\x02\xB34\x03\x02\x02\x02\xB4\xB5\x07.\x02\x02" +
		"\xB56\x03\x02\x02\x02\xB6\xB7\x07*\x02\x02\xB78\x03\x02\x02\x02\xB8\xB9" +
		"\x07+\x02\x02\xB9:\x03\x02\x02\x02\xBA\xBB\x07}\x02\x02\xBB<\x03\x02\x02" +
		"\x02\xBC\xBD\x07\x7F\x02\x02\xBD>\x03\x02\x02\x02\xBE\xBF\x07]\x02\x02" +
		"\xBF@\x03\x02\x02\x02\xC0\xC1\x07_\x02\x02\xC1B\x03\x02\x02\x02\xC2\xC3" +
		"\x070\x02\x02\xC3D\x03\x02\x02\x02\xC4\xC5\x07-\x02\x02\xC5\xC6\x07-\x02" +
		"\x02\xC6F\x03\x02\x02\x02\xC7\xC8\x07/\x02\x02\xC8\xC9\x07/\x02\x02\xC9" +
		"H\x03\x02\x02\x02\xCA\xCB\x071\x02\x02\xCB\xCC\x071\x02\x02\xCC\xD0\x03" +
		"\x02\x02\x02\xCD\xCF\n\x05\x02\x02\xCE\xCD\x03\x02\x02\x02\xCF\xD2\x03" +
		"\x02\x02\x02\xD0\xCE\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD3\x03" +
		"\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD3\xD4\b%\x02\x02\xD4J\x03\x02\x02" +
		"\x02\xD5\xD6\x071\x02\x02\xD6\xD7\x07,\x02\x02\xD7\xDB\x03\x02\x02\x02" +
		"\xD8\xDA\v\x02\x02\x02\xD9\xD8\x03\x02\x02\x02\xDA\xDD\x03\x02\x02\x02" +
		"\xDB\xDC\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDC\xDE\x03\x02\x02\x02" +
		"\xDD\xDB\x03\x02\x02\x02\xDE\xDF\x07,\x02\x02\xDF\xE0\x071\x02\x02\xE0" +
		"\xE1\x03\x02\x02\x02\xE1\xE2\b&\x02\x02\xE2L\x03\x02\x02\x02\xE3\xE5\t" +
		"\x06\x02\x02\xE4\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6\xE4\x03" +
		"\x02\x02\x02\xE6\xE7\x03\x02\x02\x02\xE7\xE8\x03\x02\x02\x02\xE8\xE9\b" +
		"\'\x02\x02\xE9N\x03\x02\x02\x02\t\x02\x85\x8B\x91\xD0\xDB\xE6\x03\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!MindLangLexer.__ATN) {
			MindLangLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(MindLangLexer._serializedATN));
		}

		return MindLangLexer.__ATN;
	}

}

